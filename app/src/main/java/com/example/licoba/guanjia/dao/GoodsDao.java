package com.example.licoba.guanjia.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.licoba.guanjia.entitys.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Remain = new Property(2, int.class, "remain", false, "REMAIN");
        public final static Property Sold = new Property(3, int.class, "sold", false, "SOLD");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Price = new Property(5, float.class, "price", false, "PRICE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Firstchar = new Property(7, String.class, "firstchar", false, "FIRSTCHAR");
        public final static Property Adddate = new Property(8, String.class, "adddate", false, "ADDDATE");
    }


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"REMAIN\" INTEGER NOT NULL ," + // 2: remain
                "\"SOLD\" INTEGER NOT NULL ," + // 3: sold
                "\"CATEGORY\" TEXT NOT NULL ," + // 4: category
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"REMARK\" TEXT," + // 6: remark
                "\"FIRSTCHAR\" TEXT," + // 7: firstchar
                "\"ADDDATE\" TEXT);"); // 8: adddate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getRemain());
        stmt.bindLong(4, entity.getSold());
        stmt.bindString(5, entity.getCategory());
        stmt.bindDouble(6, entity.getPrice());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String firstchar = entity.getFirstchar();
        if (firstchar != null) {
            stmt.bindString(8, firstchar);
        }
 
        String adddate = entity.getAdddate();
        if (adddate != null) {
            stmt.bindString(9, adddate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getRemain());
        stmt.bindLong(4, entity.getSold());
        stmt.bindString(5, entity.getCategory());
        stmt.bindDouble(6, entity.getPrice());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String firstchar = entity.getFirstchar();
        if (firstchar != null) {
            stmt.bindString(8, firstchar);
        }
 
        String adddate = entity.getAdddate();
        if (adddate != null) {
            stmt.bindString(9, adddate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // remain
            cursor.getInt(offset + 3), // sold
            cursor.getString(offset + 4), // category
            cursor.getFloat(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // firstchar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // adddate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setRemain(cursor.getInt(offset + 2));
        entity.setSold(cursor.getInt(offset + 3));
        entity.setCategory(cursor.getString(offset + 4));
        entity.setPrice(cursor.getFloat(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFirstchar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdddate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Goods entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
